name: Main Branch Production Workflow

on:
  pull_request:
    branches:
      - main
    types: [closed]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  check-merge:
    runs-on: ubuntu-latest
    outputs:
      is_merged: ${{ github.event.pull_request.merged }}
    steps:
      - name: Check if PR was merged
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "PR was merged to main, proceeding with release"
          else
            echo "PR was not merged, skipping release"
          fi

  lint:
    runs-on: ubuntu-latest
    needs: check-merge
    if: needs.check-merge.outputs.is_merged == 'true'
    container:
      image: ubuntu:22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python and Node.js
        run: |
          # Skip installation in Act environment
          if [ "$GITHUB_ACTIONS" = "true" ] && [ "$ACT" != "true" ]; then
            apt-get update && apt-get install -y \
              curl \
              gnupg \
              python3.10 \
              python3.10-venv \
              python3-pip \
              && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
              && apt-get install -y nodejs \
              && npm install -g pnpm@10.6.4 \
              && pip3 install --no-cache-dir uv \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*
          else
            echo "Running in Act environment, skipping system package installation"
          fi

      - name: Cache UV packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            backend/.venv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml', 'pnpm-lock.yaml', 'backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: make install

      - name: Install frontend dependencies
        run: cd frontend && pnpm install --frozen-lockfile

      - name: Run linting
        run: make lint

  security-scan:
    runs-on: ubuntu-latest
    needs: check-merge
    if: needs.check-merge.outputs.is_merged == 'true'
    container:
      image: ubuntu:22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python and Node.js
        run: |
          # Skip installation in Act environment
          if [ "$GITHUB_ACTIONS" = "true" ] && [ "$ACT" != "true" ]; then
            apt-get update && apt-get install -y \
              curl \
              gnupg \
              python3.10 \
              python3.10-venv \
              python3-pip \
              && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
              && apt-get install -y nodejs \
              && npm install -g pnpm@10.6.4 \
              && pip3 install --no-cache-dir uv \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*
          else
            echo "Running in Act environment, skipping system package installation"
          fi

      - name: Cache UV packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            backend/.venv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml', 'pnpm-lock.yaml', 'backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: make install

      - name: Install frontend dependencies
        run: cd frontend && pnpm install --frozen-lockfile

      - name: Run security scan
        run: make security-scan

  test:
    needs: [lint, security-scan, check-merge]
    if: needs.check-merge.outputs.is_merged == 'true'
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: "FastAPI Project"
      POSTGRES_SERVER: "localhost"
      POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'app' }}
      FIRST_SUPERUSER: "admin@example.com"
      FIRST_SUPERUSER_PASSWORD: "adminpass123"
      EMAILS_ENABLED: "True"
      SMTP_HOST: "localhost"
      SMTP_PORT: "25"
      SMTP_USER: "test@example.com"
      SMTP_PASSWORD: "testpassword"
      EMAILS_FROM_EMAIL: "test@example.com"
      SECRET_KEY: "testing_secret_key_for_ci"
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'app' }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres && psql -U postgres -d app -c 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache UV packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            backend/.venv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml', 'pnpm-lock.yaml', 'backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.4
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: make install

      - name: Run tests
        run: make test

  release:
    needs: [test, check-merge]
    if: needs.check-merge.outputs.is_merged == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache UV packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            backend/.venv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml', 'pnpm-lock.yaml', 'backend/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: make install

      - name: Build and push Docker images
        run: make build-push

      - name: Update production deployment
        run: make deploy-production

name: Branch Protection

# This workflow protects the main and dev branches from direct pushes
# Only PR merges are allowed into these branches
# This is expected behavior and part of our branching strategy

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  branch-protection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check commit author
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
        id: check_author
        env:
          # For Act compatibility, provide fallbacks for all variables
          COMMITS_JSON: ${{ toJSON(github.event.commits || '[]') }}
          # Check if commit message contains PR merge pattern
          PR_MERGE_MESSAGE: ${{ contains(github.event.head_commit.message || '', 'Merge pull request') }}
          # Pass the full head_commit object as JSON to analyze in the script
          HEAD_COMMIT_JSON: ${{ toJSON(github.event.head_commit || '{}') }}
          # Add environment variable for Act detection
          ACT: ${{ env.ACT }}
        run: |
          # Skip check in Act environment or set to success for testing
          if [ "$ACT" = "true" ]; then
            echo "Running in Act environment, skipping branch protection check"
            exit 0
          fi

          # Extract the commits JSON to a file for processing
          echo "$COMMITS_JSON" > commits.json

          # More robust detection of PR merge commits:
          # 1. Check if commit message contains 'Merge pull request'
          # 2. Check if it's a merge commit (has multiple parents)

          # Check if this is a merge commit by examining the head_commit structure
          IS_MERGE_COMMIT="false"
          if [ "$HEAD_COMMIT_JSON" != "null" ] && [ "$HEAD_COMMIT_JSON" != "{}" ]; then
            if command -v jq >/dev/null 2>&1; then
              # Use jq to check if it's a merge commit (has multiple parents)
              # A merge commit will have a 'parents' array with more than one entry
              PARENTS_COUNT=$(echo "$HEAD_COMMIT_JSON" | jq '.parents | length // 0')
              if [ "$PARENTS_COUNT" -gt 1 ]; then
                IS_MERGE_COMMIT="true"
              fi
            else
              echo "jq not found, using commit message check"
              if [ "$PR_MERGE_MESSAGE" = "true" ]; then
                IS_MERGE_COMMIT="true"
              fi
            fi
          fi

          # Only allow PR merges
          if [ "$IS_MERGE_COMMIT" = "false" ]; then
            echo "::error::Direct push to protected branch not allowed. Please create a PR instead."
            exit 1
          else
            echo "PR merge detected. Allowing commit."
          fi

      - name: Verify PR source
        if: github.event_name == 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
        env:
          # Add environment variable for Act detection
          ACT: ${{ env.ACT }}
        run: |
          # Skip check in Act environment or set to success for testing
          if [ "$ACT" = "true" ]; then
            echo "Running in Act environment, skipping PR source verification"
            exit 0
          fi

          # For PRs to main, ensure they come from dev
          if [ "$GITHUB_REF" == "refs/heads/main" ]; then
            if [ "$GITHUB_HEAD_REF" != "dev" ]; then
              echo "::error::PRs to main must come from dev branch"
              exit 1
            fi
          fi

      - name: Verify PR state
        if: github.event_name == 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
        env:
          # Add environment variable for Act detection
          ACT: ${{ env.ACT }}
        run: |
          # Skip check in Act environment or set to success for testing
          if [ "$ACT" = "true" ]; then
            echo "Running in Act environment, skipping PR state verification"
            exit 0
          fi

          # For PRs to main, ensure they are approved
          if [ "$GITHUB_REF" == "refs/heads/main" ]; then
            if [ "$GITHUB_EVENT_NAME" == "pull_request" ] && [ "$GITHUB_EVENT_ACTION" == "closed" ]; then
              if [ "$GITHUB_EVENT_PULL_REQUEST_MERGED" != "true" ]; then
                echo "::error::PR must be approved before merging to main"
                exit 1
              fi
            fi
          fi

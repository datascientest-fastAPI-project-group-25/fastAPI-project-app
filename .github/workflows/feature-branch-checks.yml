name: Feature Branch Checks

on:
  push:
    branches:
      - 'feat/*'
      - 'fix/*'

jobs:
  style-checks:
    name: Style and Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN which is automatically provided by GitHub Actions

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.11"
          enable-cache: true
        continue-on-error: true  # Continue even if uv setup fails

      - name: Install Python dependencies
        run: |
          # Try to use uv if available, otherwise fall back to pip
          if command -v uv &> /dev/null; then
            uv venv
            source .venv/bin/activate
            uv pip install black ruff bandit pip-audit mypy
          else
            python -m venv .venv
            source .venv/bin/activate
            pip install black ruff bandit pip-audit mypy
          fi
        working-directory: backend

      - name: Run black
        run: |
          source .venv/bin/activate
          black --check . || echo "Black check failed, but continuing workflow"
        working-directory: backend

      - name: Run ruff
        run: |
          source .venv/bin/activate
          ruff check . || echo "Ruff check failed, but continuing workflow"
        working-directory: backend

      - name: Run mypy
        run: |
          source .venv/bin/activate
          mypy . || echo "Mypy check failed, but continuing workflow"
        working-directory: backend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Run ESLint
        run: npm run lint
        working-directory: frontend

      - name: Run Prettier
        run: npm run format:check
        working-directory: frontend

  security-checks:
    name: Security Scans
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN which is automatically provided by GitHub Actions

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.11"
          enable-cache: true
        continue-on-error: true  # Continue even if uv setup fails

      - name: Install Python dependencies
        run: |
          # Try to use uv if available, otherwise fall back to pip
          if command -v uv &> /dev/null; then
            uv venv
            source .venv/bin/activate
            uv pip install bandit pip-audit
          else
            python -m venv .venv
            source .venv/bin/activate
            pip install bandit pip-audit
          fi
        working-directory: backend

      - name: Run Bandit
        run: |
          source .venv/bin/activate
          # Using more permissive settings for test code
          # Skip common test-related issues: B101 (assert), B105 (hardcoded passwords), B106 (hardcoded passwords in defaults)
          # Only report high severity issues and exclude test files and third-party code
          bandit -r . -ll --skip B101,B105,B106,B110,B311 --exclude './tests/,./app/tests/,./.venv/' || true
        working-directory: backend

      - name: Run pip-audit
        run: |
          source .venv/bin/activate
          # Run pip-audit but continue even if vulnerabilities are found
          pip-audit || echo "Vulnerabilities found, but continuing workflow"
        working-directory: backend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci
        working-directory: frontend

      - name: Run npm audit
        run: npm audit --production || echo "Vulnerabilities found, but continuing workflow"
        working-directory: frontend

  unit-tests:
    name: Unit Tests
    uses: ./.github/workflows/reusable-jobs.yml
    with:
      environment: test
      image-tag: ${{ github.sha }}
      python-version: '3.11'
      node-version: '18'
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

name: Build and Push Staging Images

on:
  push:
    branches:
      - stg

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Get version from VERSION file
        id: get-version
        run: |
          # Read the current version from VERSION file
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION)
            echo "Current version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "::error::VERSION file not found"
            exit 1
          fi

  build-stg-images:
    needs: get-version
    uses: ./.github/workflows/build-image.yml
    with:
      environment: stg
      semantic_version: ${{ needs.get-version.outputs.version }}

  verify-images:
    needs: build-stg-images
    uses: ./.github/workflows/verify-images.yml
    with:
      backend_image: ${{ needs.build-stg-images.outputs.backend_image_tag_hash }}
      frontend_image: ${{ needs.build-stg-images.outputs.frontend_image_tag_hash }}

  create-stg-prerelease:
    needs: [get-version, build-stg-images, verify-images]
    if: needs.verify-images.outputs.backend_verified == 'true' && needs.verify-images.outputs.frontend_verified == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for softprops/action-gh-release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Required for changelog generation

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag (prod or stg)
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $LATEST_TAG"

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tag found, including all commits in changelog"
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --reverse)
          else
            echo "Generating changelog since tag $LATEST_TAG"
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"* %s (%h)" --reverse)
          fi

          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="No changes detected since last tag ($LATEST_TAG)."
          fi

          # Save changelog to a file for debugging
          echo "$CHANGELOG" > changelog-stg.md

          # Set changelog output
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Create Staging Pre-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get-version.outputs.version }}-stg
          name: Pre-release v${{ needs.get-version.outputs.version }}-stg
          body: |
            ## Staging Pre-release v${{ needs.get-version.outputs.version }}-stg

            This pre-release contains changes merged into the `stg` branch.

            ### What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ### Docker Images
            - Backend: `ghcr.io/datascientest-fastapi-project-group-25/fastapi-project-app-backend:stg-${{ needs.get-version.outputs.version }}`
            - Frontend: `ghcr.io/datascientest-fastapi-project-group-25/fastapi-project-app-frontend:stg-${{ needs.get-version.outputs.version }}`

            ### Verification Status
            - Backend: ✅ Verified
            - Frontend: ✅ Verified
          prerelease: true
          generate_release_notes: false

  trigger-release:
    needs: [get-version, build-stg-images, verify-images]
    if: needs.verify-images.outputs.backend_verified == 'true' && needs.verify-images.outputs.frontend_verified == 'true'
    uses: ./.github/workflows/trigger-helm-release.yml
    with:
      version: stg-${{ github.sha }} # Keep using SHA for the release name consistency in ArgoCD/Helm repo
      environment: stg
      backend_image: ${{ needs.build-stg-images.outputs.backend_image_tag_hash }} # Pass backend SHA tag
      frontend_image: ${{ needs.build-stg-images.outputs.frontend_image_tag_hash }} # Pass frontend SHA tag
      semantic_version: ${{ needs.get-version.outputs.version }} # Pass the actual SemVer for Helm charts
    secrets:
      MACHINE_USER_TOKEN: ${{ secrets.MACHINE_USER_TOKEN }}

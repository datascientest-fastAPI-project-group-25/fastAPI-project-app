name: Local Runner

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target to test (backend, frontend, or all)'
        required: false
        type: string
        default: 'all'

jobs:
  backend-lint:
    if: inputs.target == 'backend' || inputs.target == 'all' || inputs.target == ''
    runs-on: ubuntu-latest
    env:
      UV_SYSTEM_PYTHON: 1
    steps:
      - name: Check working directory
        run: |
          echo "Using local working directory..."
          ls -la
          echo "Working directory checked."

      - name: Check Python
        run: |
          echo "Using local Python installation..."
          python --version
          echo "Python version checked."

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        working-directory: backend
        run: uv pip install -e ".[dev,test]"

      - name: Run ruff linting
        working-directory: backend
        run: |
          uv run ruff check app
          uv run ruff format --check app

  frontend-lint:
    if: inputs.target == 'frontend' || inputs.target == 'all' || inputs.target == ''
    runs-on: ubuntu-latest
    steps:
      - name: Check working directory
        run: |
          echo "Using local working directory..."
          ls -la
          echo "Working directory checked."

      - name: Check Node.js
        run: |
          echo "Using local Node.js installation..."
          node --version
          echo "Node.js version checked."

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Run biome linting
        run: pnpm run lint

  backend-tests:
    if: inputs.target == 'backend' || inputs.target == 'all' || inputs.target == ''
    runs-on: ubuntu-latest
    env:
      UV_SYSTEM_PYTHON: 1
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      PROJECT_NAME: FastAPI
      POSTGRES_SERVER: localhost
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      FIRST_SUPERUSER: admin@example.com
      FIRST_SUPERUSER_PASSWORD: password
      PYTHONUNBUFFERED: "1"
    steps:
      - name: Check working directory
        run: |
          echo "Using local working directory..."
          ls -la
          echo "Working directory checked."

      - name: Check Python
        run: |
          echo "Using local Python installation..."
          python --version
          echo "Python version checked."

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        working-directory: backend
        run: uv pip install -e ".[dev,test]"

      - name: Run backend unit tests
        working-directory: backend
        id: unit_tests
        continue-on-error: true
        run: |
          echo "Running backend unit tests..."
          uv run pytest tests/unit -v

      - name: Run backend integration tests
        working-directory: backend
        id: integration_tests
        continue-on-error: true
        run: |
          echo "Running backend integration tests..."
          uv run pytest tests/integration -v

      - name: Run backend API tests
        working-directory: backend
        id: api_tests
        continue-on-error: true
        run: |
          echo "Running backend API tests..."
          uv run pytest tests/api -v

      - name: Run backend CRUD tests
        working-directory: backend
        id: crud_tests
        continue-on-error: true
        run: |
          echo "Running backend CRUD tests..."
          uv run pytest tests/crud -v

  frontend-tests:
    if: inputs.target == 'frontend' || inputs.target == 'all' || inputs.target == ''
    runs-on: ubuntu-latest
    steps:
      - name: Check working directory
        run: |
          echo "Using local working directory..."
          ls -la
          echo "Working directory checked."

      - name: Check Node.js
        run: |
          echo "Using local Node.js installation..."
          node --version
          echo "Node.js version checked."

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Run frontend unit tests
        id: frontend_unit_tests
        continue-on-error: true
        run: |
          echo "Running frontend unit tests..."
          pnpm run test:unit

      - name: Run frontend e2e tests
        id: frontend_e2e_tests
        continue-on-error: true
        run: |
          echo "Running frontend e2e tests..."
          pnpm run test:e2e

name: Merge to Main

on:
  pull_request:
    branches: [main]
    types:
      - closed

permissions:
  contents: write
  packages: write

jobs:
  retag-images:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract PR information
        id: pr-info
        run: |
          # Get the merge commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Extract branch type from PR title or labels
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" == *"feat"* ]]; then
            echo "BRANCH_TYPE=feat" >> $GITHUB_ENV
            echo "BUMP_TYPE=minor" >> $GITHUB_ENV
          elif [[ "$PR_TITLE" == *"fix"* ]]; then
            echo "BRANCH_TYPE=fix" >> $GITHUB_ENV
            echo "BUMP_TYPE=patch" >> $GITHUB_ENV
          else
            echo "BRANCH_TYPE=other" >> $GITHUB_ENV
            echo "BUMP_TYPE=patch" >> $GITHUB_ENV
          fi

          # Get the current version
          if [ -f VERSION ]; then
            CURRENT_VERSION=$(cat VERSION)
          else
            CURRENT_VERSION="0.1.0"
            echo $CURRENT_VERSION > VERSION
          fi
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

          # Calculate new version based on bump type
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          if [[ "${{ env.BUMP_TYPE }}" == "minor" ]]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull staging images
        run: |
          # Pull the staging images
          docker pull ghcr.io/${{ github.repository }}-backend:stg
          docker pull ghcr.io/${{ github.repository }}-frontend:stg

      - name: Retag and push production images
        run: |
          # Retag with semantic version and latest
          docker tag ghcr.io/${{ github.repository }}-backend:stg ghcr.io/${{ github.repository }}-backend:${{ env.NEW_VERSION }}
          docker tag ghcr.io/${{ github.repository }}-backend:stg ghcr.io/${{ github.repository }}-backend:latest

          docker tag ghcr.io/${{ github.repository }}-frontend:stg ghcr.io/${{ github.repository }}-frontend:${{ env.NEW_VERSION }}
          docker tag ghcr.io/${{ github.repository }}-frontend:stg ghcr.io/${{ github.repository }}-frontend:latest

          # Push the new tags
          docker push ghcr.io/${{ github.repository }}-backend:${{ env.NEW_VERSION }}
          docker push ghcr.io/${{ github.repository }}-backend:latest

          docker push ghcr.io/${{ github.repository }}-frontend:${{ env.NEW_VERSION }}
          docker push ghcr.io/${{ github.repository }}-frontend:latest

      - name: Update VERSION file
        run: |
          echo ${{ env.NEW_VERSION }} > VERSION
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }} [skip ci]"
          git push

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const newVersion = '${{ env.NEW_VERSION }}';
            const bumpType = '${{ env.BUMP_TYPE }}';

            let bumpMessage = '';
            if (bumpType === 'minor') {
              bumpMessage = 'Minor version bump';
            } else if (bumpType === 'patch') {
              bumpMessage = 'Patch version bump';
            }

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## ðŸš€ Production Images Tagged and Pushed\n\n${bumpMessage}: **${newVersion}**\n\nImages are available at:\n- \`ghcr.io/${context.repo.owner}/${context.repo.repo}-backend:${newVersion}\`\n- \`ghcr.io/${context.repo.owner}/${context.repo.repo}-backend:latest\`\n- \`ghcr.io/${context.repo.owner}/${context.repo.repo}-frontend:${newVersion}\`\n- \`ghcr.io/${context.repo.owner}/${context.repo.repo}-frontend:latest\`\n\nDeployment to production is complete.`
            });

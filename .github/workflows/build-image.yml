name: Reusable Image Build and Push

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment to build for (stg or prod)"
      semantic_version:
        required: false
        type: string
        default: ""
        description: "Optional semantic version for SemVer tagging"
      image_tag_prefix:
        required: false
        type: string
        default: ""
        description: "Optional prefix for image tags"
    secrets:
      GITHUB_TOKEN:
        required: true
        description: "Token for pushing images"
    outputs:
      environment:
        description: "The environment the image was built for"
        value: ${{ jobs.collect-outputs.outputs.environment }}
      backend_image_tag_hash:
        description: "Backend image tag using SHA (e.g., stg-abcdef1)"
        value: ${{ jobs.collect-outputs.outputs.backend_image_tag_hash }}
      backend_image_tag_semver:
        description: "Backend image tag using SemVer (e.g., stg-0.1.2 or 0.1.2)"
        value: ${{ jobs.collect-outputs.outputs.backend_image_tag_semver }}
      backend_image_tag_latest:
        description: "Backend image tag using 'latest' (prod only)"
        value: ${{ jobs.collect-outputs.outputs.backend_image_tag_latest }}
      frontend_image_tag_hash:
        description: "Frontend image tag using SHA (e.g., stg-abcdef1)"
        value: ${{ jobs.collect-outputs.outputs.frontend_image_tag_hash }}
      frontend_image_tag_semver:
        description: "Frontend image tag using SemVer (e.g., stg-0.1.2 or 0.1.2)"
        value: ${{ jobs.collect-outputs.outputs.frontend_image_tag_semver }}
      frontend_image_tag_latest:
        description: "Frontend image tag using 'latest' (prod only)"
        value: ${{ jobs.collect-outputs.outputs.frontend_image_tag_latest }}

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ inputs.environment }}
      backend_image_tag_hash: ${{ steps.workflow_outputs.outputs.backend_image_tag_hash }}
      backend_image_tag_semver: ${{ steps.workflow_outputs.outputs.backend_image_tag_semver }}
      backend_image_tag_latest: ${{ steps.workflow_outputs.outputs.backend_image_tag_latest }}
      frontend_image_tag_hash: ${{ steps.workflow_outputs.outputs.frontend_image_tag_hash }}
      frontend_image_tag_semver: ${{ steps.workflow_outputs.outputs.frontend_image_tag_semver }}
      frontend_image_tag_latest: ${{ steps.workflow_outputs.outputs.frontend_image_tag_latest }}
    strategy:
      matrix:
        app_component: [backend, frontend]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        id: set-tags
        run: |
          # Environment (stg or prod)
          ENV="${{ inputs.environment }}"
          # Optional prefix for image tags
          PREFIX="${{ inputs.image_tag_prefix }}"
          # First 7 characters of the git commit SHA
          SHORT_SHA="$(echo ${{ github.sha }} | cut -c1-7)"
          # Current component (backend or frontend)
          COMPONENT="${{ matrix.app_component }}"
          # Optional semantic version for SemVer tagging
          SEMANTIC_VERSION="${{ inputs.semantic_version }}"

          # Add hyphen to prefix if it exists
          if [ -n "$PREFIX" ]; then
            PREFIX="${PREFIX}-"
          fi

          # Convert repository owner and name to lowercase for Docker image naming
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')

          # Set image tags based on environment
          if [ "$ENV" == "stg" ]; then
            # Staging: use both stg-SHA and stg-SemVer formats
            # IMPORTANT: The stg-SHA format must be maintained exactly as "stg-{hash}" with no other prefix/suffix
            # The release repository expects this exact format for staging images
            # We also add a semver tag for better traceability
            if [ -n "$SEMANTIC_VERSION" ]; then
              IMAGE_TAGS="ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${SHORT_SHA},ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${SEMANTIC_VERSION}"
              echo "Creating staging image tags: ${PREFIX}stg-${SHORT_SHA} and ${PREFIX}stg-${SEMANTIC_VERSION}"
            else
              IMAGE_TAGS="ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${SHORT_SHA}"
              echo "Creating staging image tag: ${PREFIX}stg-${SHORT_SHA}"
            fi

            # Store both tags separately for later use
            echo "image_tag_hash=ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${SHORT_SHA}" >> $GITHUB_OUTPUT
            if [ -n "$SEMANTIC_VERSION" ]; then
              echo "image_tag_semver=ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${SEMANTIC_VERSION}" >> $GITHUB_OUTPUT
            fi
          else
            # Production: Use semantic version and latest tag
            # For production, we use the semantic version directly with no prefix/suffix
            if [ -n "$SEMANTIC_VERSION" ]; then
              IMAGE_TAGS="ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}${SEMANTIC_VERSION},ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:latest"
              echo "Creating production image tags: ${PREFIX}${SEMANTIC_VERSION} and latest"
              echo "image_tag_semver=ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}${SEMANTIC_VERSION}" >> $GITHUB_OUTPUT
              echo "image_tag_latest=ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:latest" >> $GITHUB_OUTPUT
            else
              IMAGE_TAGS="ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:latest"
              echo "Creating production image tag: latest"
              echo "image_tag_latest=ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:latest" >> $GITHUB_OUTPUT
            fi
          fi

          echo "image_tags=$IMAGE_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.app_component }} image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.app_component }}
          file: ./${{ matrix.app_component }}/Dockerfile
          push: true
          tags: ${{ steps.set-tags.outputs.image_tags }}
          cache-from: type=gha,scope=${{ matrix.app_component }}-${{ inputs.environment }}
          cache-to: type=gha,scope=${{ matrix.app_component }}-${{ inputs.environment }},mode=max
          build-args: |
            GIT_HASH=${{ github.sha }}
            BRANCH_TYPE=${{ inputs.environment }}
          # Enable provenance attestation for supply chain security
          provenance: true
          # Add labels for better image management
          labels: |
            org.opencontainers.image.title=${{ matrix.app_component }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.environment=${{ inputs.environment }}

      - name: Verify ${{ matrix.app_component }} image build
        if: steps.build-image.outcome != 'success'
        run: |
          echo "::error::${{ matrix.app_component }} image build failed"
          exit 1

      - name: Expose component-specific outputs
        id: workflow_outputs
        run: |
          # Store the component name for reference in the outputs
          COMPONENT="${{ matrix.app_component }}"
          echo "component=$COMPONENT" >> $GITHUB_OUTPUT
          echo "${COMPONENT}_image_tag_hash=${{ steps.set-tags.outputs.image_tag_hash }}" >> $GITHUB_OUTPUT
          echo "${COMPONENT}_image_tag_semver=${{ steps.set-tags.outputs.image_tag_semver }}" >> $GITHUB_OUTPUT
          echo "${COMPONENT}_image_tag_latest=${{ steps.set-tags.outputs.image_tag_latest }}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: steps.build-image.outcome == 'success'
        continue-on-error: true
        with:
          image-ref: ${{ steps.set-tags.outputs.image_tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.build-image.outcome == 'success'
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
          category: '${{ matrix.app_component }}-image'

  collect-outputs:
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ needs.build-and-push.outputs.environment }}
      backend_image_tag_hash: ${{ needs.build-and-push.outputs.backend_image_tag_hash }}
      backend_image_tag_semver: ${{ needs.build-and-push.outputs.backend_image_tag_semver }}
      backend_image_tag_latest: ${{ needs.build-and-push.outputs.backend_image_tag_latest }}
      frontend_image_tag_hash: ${{ needs.build-and-push.outputs.frontend_image_tag_hash }}
      frontend_image_tag_semver: ${{ needs.build-and-push.outputs.frontend_image_tag_semver }}
      frontend_image_tag_latest: ${{ needs.build-and-push.outputs.frontend_image_tag_latest }}
    steps:
      - name: Consolidate outputs
        run: |
          echo "Outputs collected from matrix jobs"
          echo "Backend image tag hash: ${{ needs.build-and-push.outputs.backend_image_tag_hash }}"
          echo "Backend image tag semver: ${{ needs.build-and-push.outputs.backend_image_tag_semver }}"
          echo "Frontend image tag hash: ${{ needs.build-and-push.outputs.frontend_image_tag_hash }}"
          echo "Frontend image tag semver: ${{ needs.build-and-push.outputs.frontend_image_tag_semver }}"

  # Comment on commit
  comment-on-commit:
    needs: [collect-outputs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            const sha = context.sha;
            const shortSha = sha.substring(0, 7);
            const env = '${{ needs.collect-outputs.outputs.environment }}';
            const prefix = '${{ inputs.image_tag_prefix }}' ? '${{ inputs.image_tag_prefix }}-' : '';

            let envName = env === 'stg' ? 'Staging' : 'Production';
            let imageTagsMessage = '';

            const repoOwner = context.repo.owner.toLowerCase();
            const repoName = context.repo.repo.toLowerCase();

            if (env === 'stg') {
              // For staging: include both stg-SHA and stg-SemVer formats
              // IMPORTANT: The stg-SHA format must be maintained exactly as "stg-{hash}" with no other prefix/suffix
              // The release repository expects this exact format for staging images
              // We also add a semver tag for better traceability
              imageTagsMessage = 'Images are available at:\n' +
                '- Backend:\n' +
                '  - `ghcr.io/' + repoOwner + '/' + repoName + '-backend:' + prefix + 'stg-' + shortSha + '` (SHA tag)\n' +
                '  - `ghcr.io/' + repoOwner + '/' + repoName + '-backend:' + prefix + 'stg-' + '${{ inputs.semantic_version }}' + '` (SemVer tag)\n' +
                '- Frontend:\n' +
                '  - `ghcr.io/' + repoOwner + '/' + repoName + '-frontend:' + prefix + 'stg-' + shortSha + '` (SHA tag)\n' +
                '  - `ghcr.io/' + repoOwner + '/' + repoName + '-frontend:' + prefix + 'stg-' + '${{ inputs.semantic_version }}' + '` (SemVer tag)';
            } else {
              // For production: both use version
              imageTagsMessage = 'Images are available at:\n' +
                '- Backend: `ghcr.io/' + repoOwner + '/' + repoName + '-backend:' + prefix + '${{ inputs.semantic_version }}' + '`\n' +
                '- Frontend: `ghcr.io/' + repoOwner + '/' + repoName + '-frontend:' + prefix + '${{ inputs.semantic_version }}' + '`';
            }

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
              body: '## ' + envName + ' Images Built and Pushed\n\n' + imageTagsMessage + '\n\n### Security Scanning\nVulnerability scanning was performed on both images. Check the GitHub Security tab for detailed results.\n\n### Image Labels\nImages include standard OCI labels for better traceability and management.'
            });

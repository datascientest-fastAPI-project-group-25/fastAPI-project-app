name: Reusable Image Build and Push

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment to build for (stg or prod)"
      version_bump_type:
        required: false
        type: string
        default: "patch"
        description: "Type of version bump (major, minor, patch)"
      image_tag_prefix:
        required: false
        type: string
        default: ""
        description: "Optional prefix for image tags"
    outputs:
      version:
        description: "The new version after bumping"
        value: ${{ jobs.collect-outputs.outputs.version }}
      new_version:
        description: "The new version after bumping"
        value: ${{ jobs.collect-outputs.outputs.version }}
      environment:
        description: "The environment the image was built for"
        value: ${{ jobs.collect-outputs.outputs.environment }}
      backend_image_tag_hash:
        description: "Backend image tag using SHA (e.g., stg-abcdef1)"
        value: ${{ jobs.collect-outputs.outputs.backend_image_tag_hash }}
      backend_image_tag_semver:
        description: "Backend image tag using SemVer (e.g., stg-0.1.2 or 0.1.2)"
        value: ${{ jobs.collect-outputs.outputs.backend_image_tag_semver }}
      backend_image_tag_latest:
        description: "Backend image tag using 'latest' (prod only)"
        value: ${{ jobs.collect-outputs.outputs.backend_image_tag_latest }}
      frontend_image_tag_hash:
        description: "Frontend image tag using SHA (e.g., stg-abcdef1)"
        value: ${{ jobs.collect-outputs.outputs.frontend_image_tag_hash }}
      frontend_image_tag_semver:
        description: "Frontend image tag using SemVer (e.g., stg-0.1.2 or 0.1.2)"
        value: ${{ jobs.collect-outputs.outputs.frontend_image_tag_semver }}
      frontend_image_tag_latest:
        description: "Frontend image tag using 'latest' (prod only)"
        value: ${{ jobs.collect-outputs.outputs.frontend_image_tag_latest }}
permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      bump_type: ${{ inputs.version_bump_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install and cache uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Bump version
        id: bump-version
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          BUMP_TYPE="${{ inputs.version_bump_type }}"
          echo "Attempting to bump version with type: $BUMP_TYPE"

          # Check if version.py exists and is executable
          if [ ! -f "version.py" ]; then
            echo "::error::version.py file not found"
            exit 1
          fi

          # Try to bump the version
          if ! python version.py bump $BUMP_TYPE; then
            echo "::error::Failed to bump version"
            exit 1
          fi

          # Get the new version
          NEW_VERSION=$(python version.py get)
          if [ -z "$NEW_VERSION" ]; then
            echo "::error::Failed to get new version"
            exit 1
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version successfully bumped to $NEW_VERSION"

      - name: Commit version bump
        id: commit-version
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status

          echo "Configuring git user"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          echo "Checking for VERSION file"
          if [ ! -f "VERSION" ]; then
            echo "::warning::VERSION file does not exist, creating it"
            echo "${{ steps.bump-version.outputs.new_version }}" > VERSION
            git add VERSION
            echo "has_changes=true" >> $GITHUB_OUTPUT
          elif ! git diff --quiet VERSION; then
            echo "Changes detected in VERSION file, committing directly"
            git add VERSION

            # Commit directly to the current branch
            git commit -m "chore: bump version to ${{ steps.bump-version.outputs.new_version }} [skip ci]"

            # Push the changes back to the same branch
            if git push origin HEAD; then
              echo "Successfully pushed version bump to current branch"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "::error::Failed to push version bump"
              exit 1
            fi
          else
            echo "No changes to VERSION file, skipping commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: bump-version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.bump-version.outputs.new_version }}
      environment: ${{ inputs.environment }}
      backend_image_tag_hash: ${{ steps.workflow_outputs_backend.outputs.image_tag_hash }}
      backend_image_tag_semver: ${{ steps.workflow_outputs_backend.outputs.image_tag_semver }}
      backend_image_tag_latest: ${{ steps.workflow_outputs_backend.outputs.image_tag_latest }}
      frontend_image_tag_hash: ${{ steps.workflow_outputs_frontend.outputs.image_tag_hash }}
      frontend_image_tag_semver: ${{ steps.workflow_outputs_frontend.outputs.image_tag_semver }}
      frontend_image_tag_latest: ${{ steps.workflow_outputs_frontend.outputs.image_tag_latest }}
    strategy:
      matrix:
        app_component: [backend, frontend]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        id: set-tags
        run: |
          # Environment (stg or prod)
          ENV="${{ inputs.environment }}"
          # Semantic version from version.py (e.g., 0.1.6)
          VERSION="${{ needs.bump-version.outputs.new_version }}"
          # Optional prefix for image tags
          PREFIX="${{ inputs.image_tag_prefix }}"
          # First 7 characters of the git commit SHA
          SHORT_SHA="$(echo ${{ github.sha }} | cut -c1-7)"
          # Current component (backend or frontend)
          COMPONENT="${{ matrix.app_component }}"

          # Add hyphen to prefix if it exists
          if [ -n "$PREFIX" ]; then
            PREFIX="${PREFIX}-"
          fi

          # Convert repository owner and name to lowercase for Docker image naming
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')

          # Set image tags based on environment
          if [ "$ENV" == "stg" ]; then
            # Staging: use both stg-SHA and stg-SemVer formats
            # IMPORTANT: The stg-SHA format must be maintained exactly as "stg-{hash}" with no other prefix/suffix
            # The release repository expects this exact format for staging images
            # We also add a semver tag for better traceability
            IMAGE_TAGS="ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${SHORT_SHA},ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${VERSION}"
            echo "Creating staging image tags: ${PREFIX}stg-${SHORT_SHA} and ${PREFIX}stg-${VERSION}"

            # Store both tags separately for later use
            echo "image_tag_hash=ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "image_tag_semver=ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${VERSION}" >> $GITHUB_OUTPUT
          else
            # Production: Use semantic version and latest tag
            # For production, we use the semantic version directly with no prefix/suffix
            IMAGE_TAGS="ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}${VERSION},ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:latest"
            echo "Creating production image tags: ${PREFIX}${VERSION} and latest"

            # Store tags separately for later use
            echo "image_tag_semver=ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}${VERSION}" >> $GITHUB_OUTPUT
            echo "image_tag_latest=ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:latest" >> $GITHUB_OUTPUT
          fi

          echo "image_tags=$IMAGE_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.app_component }} image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.app_component }}
          file: ./${{ matrix.app_component }}/Dockerfile
          push: true
          tags: ${{ steps.set-tags.outputs.image_tags }}
          cache-from: type=gha,scope=${{ matrix.app_component }}-${{ inputs.environment }}
          cache-to: type=gha,scope=${{ matrix.app_component }}-${{ inputs.environment }},mode=max
          build-args: |
            APP_VERSION=${{ needs.bump-version.outputs.new_version }}
            GIT_HASH=${{ github.sha }}
            BRANCH_TYPE=${{ inputs.environment }}
          # Enable provenance attestation for supply chain security
          provenance: true
          # Add labels for better image management
          labels: |
            org.opencontainers.image.title=${{ matrix.app_component }}
            org.opencontainers.image.version=${{ needs.bump-version.outputs.new_version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.environment=${{ inputs.environment }}

      - name: Verify ${{ matrix.app_component }} image build
        if: steps.build-image.outcome != 'success'
        run: |
          echo "::error::${{ matrix.app_component }} image build failed"
          exit 1

      - name: Expose component-specific outputs
        id: workflow_outputs_${{ matrix.app_component }}
        run: |
          echo "image_tag_hash=${{ steps.set-tags.outputs.image_tag_hash }}" >> $GITHUB_OUTPUT
          echo "image_tag_semver=${{ steps.set-tags.outputs.image_tag_semver }}" >> $GITHUB_OUTPUT
          echo "image_tag_latest=${{ steps.set-tags.outputs.image_tag_latest }}" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: steps.build-image.outcome == 'success'
        continue-on-error: true
        with:
          image-ref: ${{ steps.set-tags.outputs.image_tags }}
          format: 'sarif'
          output: 'trivy-${{ matrix.app_component }}-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.build-image.outcome == 'success'
        continue-on-error: true
        with:
          sarif_file: 'trivy-${{ matrix.app_component }}-results.sarif'
          category: '${{ matrix.app_component }}-image'

  collect-outputs:
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.build-and-push.outputs.version }}
      environment: ${{ needs.build-and-push.outputs.environment }}
      backend_image_tag_hash: ${{ needs.build-and-push.outputs.backend_image_tag_hash }}
      backend_image_tag_semver: ${{ needs.build-and-push.outputs.backend_image_tag_semver }}
      backend_image_tag_latest: ${{ needs.build-and-push.outputs.backend_image_tag_latest }}
      frontend_image_tag_hash: ${{ needs.build-and-push.outputs.frontend_image_tag_hash }}
      frontend_image_tag_semver: ${{ needs.build-and-push.outputs.frontend_image_tag_semver }}
      frontend_image_tag_latest: ${{ needs.build-and-push.outputs.frontend_image_tag_latest }}
    steps:
      - name: Consolidate outputs
        run: echo "Outputs collected from matrix jobs"

  # Comment on commit
  comment-on-commit:
    needs: [bump-version, collect-outputs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            const sha = context.sha;
            const shortSha = sha.substring(0, 7);
            const version = '${{ needs.collect-outputs.outputs.version }}';
            const bumpType = '${{ needs.bump-version.outputs.bump_type }}';
            const env = '${{ needs.collect-outputs.outputs.environment }}';
            const prefix = '${{ inputs.image_tag_prefix }}' ? '${{ inputs.image_tag_prefix }}-' : '';

            let bumpMessage = '';
            if (bumpType === 'major') {
              bumpMessage = 'Major version bump';
            } else if (bumpType === 'minor') {
              bumpMessage = 'Minor version bump';
            } else {
              bumpMessage = 'Patch version bump';
            }

            const envName = env === 'stg' ? 'Staging' : 'Production';
            let imageTagsMessage = '';

            const repoOwner = context.repo.owner.toLowerCase();
            const repoName = context.repo.repo.toLowerCase();

            if (env === 'stg') {
              // For staging: include both stg-SHA and stg-SemVer formats
              // IMPORTANT: The stg-SHA format must be maintained exactly as "stg-{hash}" with no other prefix/suffix
              // The release repository expects this exact format for staging images
              // We also add a semver tag for better traceability
              imageTagsMessage = 'Images are available at:\n' +
                '- Backend:\n' +
                '  - `ghcr.io/' + repoOwner + '/' + repoName + '-backend:' + prefix + 'stg-' + shortSha + '` (SHA tag)\n' +
                '  - `ghcr.io/' + repoOwner + '/' + repoName + '-backend:' + prefix + 'stg-' + version + '` (SemVer tag)\n' +
                '- Frontend:\n' +
                '  - `ghcr.io/' + repoOwner + '/' + repoName + '-frontend:' + prefix + 'stg-' + shortSha + '` (SHA tag)\n' +
                '  - `ghcr.io/' + repoOwner + '/' + repoName + '-frontend:' + prefix + 'stg-' + version + '` (SemVer tag)';
            } else {
              // For production: both use version
              imageTagsMessage = 'Images are available at:\n' +
                '- Backend: `ghcr.io/' + repoOwner + '/' + repoName + '-backend:' + prefix + version + '`\n' +
                '- Frontend: `ghcr.io/' + repoOwner + '/' + repoName + '-frontend:' + prefix + version + '`';
            }

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
              body: '## ' + envName + ' Images Built and Pushed\n\n' + bumpMessage + ': **' + version + '**\n\n' + imageTagsMessage + '\n\n### Security Scanning\nVulnerability scanning was performed on both images. Check the GitHub Security tab for detailed results.\n\n### Image Labels\nImages include standard OCI labels for better traceability and management.'
            });

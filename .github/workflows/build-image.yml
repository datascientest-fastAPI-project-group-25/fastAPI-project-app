name: Reusable Image Build and Push

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment to build for (stg or prod)"
      semantic_version:
        required: false
        type: string
        default: ""
        description: "Optional semantic version for SemVer tagging"
      image_tag_prefix:
        required: false
        type: string
        default: ""
        description: "Optional prefix for image tags"
    outputs:
      environment:
        description: "The environment the image was built for"
        value: ${{ jobs.collect-outputs.outputs.environment }}
      backend_image_tag_hash:
        description: "Backend image tag using SHA (e.g., stg-abcdef1)"
        value: ${{ jobs.collect-outputs.outputs.backend_image_tag_hash }}
      backend_image_tag_semver:
        description: "Backend image tag using SemVer (e.g., stg-0.1.2 or 0.1.2)"
        value: ${{ jobs.collect-outputs.outputs.backend_image_tag_semver }}
      backend_image_tag_latest:
        description: "Backend image tag using 'latest' (prod only)"
        value: ${{ jobs.collect-outputs.outputs.backend_image_tag_latest }}
      frontend_image_tag_hash:
        description: "Frontend image tag using SHA (e.g., stg-abcdef1)"
        value: ${{ jobs.collect-outputs.outputs.frontend_image_tag_hash }}
      frontend_image_tag_semver:
        description: "Frontend image tag using SemVer (e.g., stg-0.1.2 or 0.1.2)"
        value: ${{ jobs.collect-outputs.outputs.frontend_image_tag_semver }}
      frontend_image_tag_latest:
        description: "Frontend image tag using 'latest' (prod only)"
        value: ${{ jobs.collect-outputs.outputs.frontend_image_tag_latest }}

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  build-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app_component: [backend, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git describe

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        id: set-tags
        run: |
          # Environment (stg or prod)
          ENV="${{ inputs.environment }}"
          # Optional prefix for image tags
          PREFIX="${{ inputs.image_tag_prefix }}"
          # Current component (backend or frontend)
          COMPONENT="${{ matrix.app_component }}"
          # Optional semantic version for SemVer tagging
          SEMANTIC_VERSION="${{ inputs.semantic_version }}"

          # Add hyphen to prefix if it exists
          if [ -n "$PREFIX" ]; then
            PREFIX="$PREFIX-"
          fi

          # Get short SHA for image tag
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "Short SHA: $SHORT_SHA"

          # Set base image name
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          BASE_IMAGE_NAME="ghcr.io/datascientest-fastapi-project-group-25/${REPO_NAME}-$COMPONENT"
          echo "Base image name: $BASE_IMAGE_NAME"

          # Set SHA-based tag (always created)
          if [ "$ENV" = "prod" ]; then
            # For production, no environment in tag
            IMAGE_TAG_HASH="${PREFIX}${SHORT_SHA}"
          else
            # For staging, include environment in tag
            IMAGE_TAG_HASH="${PREFIX}${ENV}-${SHORT_SHA}"
          fi
          echo "SHA-based tag: $IMAGE_TAG_HASH"
          echo "image_tag_hash=$IMAGE_TAG_HASH" >> $GITHUB_OUTPUT
          echo "base_image_name=$BASE_IMAGE_NAME" >> $GITHUB_OUTPUT

          # Set SemVer-based tag (if version provided)
          if [ -n "$SEMANTIC_VERSION" ]; then
            if [ "$ENV" = "prod" ]; then
              # For production, no environment in tag
              IMAGE_TAG_SEMVER="${PREFIX}${SEMANTIC_VERSION}"
            else
              # For staging, include environment in tag
              IMAGE_TAG_SEMVER="${PREFIX}${ENV}-${SEMANTIC_VERSION}"
            fi
            echo "SemVer-based tag: $IMAGE_TAG_SEMVER"
            echo "image_tag_semver=$IMAGE_TAG_SEMVER" >> $GITHUB_OUTPUT
          else
            echo "No semantic version provided, skipping SemVer tag"
            echo "image_tag_semver=" >> $GITHUB_OUTPUT
          fi

          # Set 'latest' tag (for production only)
          if [ "$ENV" = "prod" ]; then
            IMAGE_TAG_LATEST="${PREFIX}latest"
            echo "Latest tag: $IMAGE_TAG_LATEST"
            echo "image_tag_latest=$IMAGE_TAG_LATEST" >> $GITHUB_OUTPUT
          else
            echo "Not production, skipping 'latest' tag"
            echo "image_tag_latest=" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.app_component }}
          push: true
          build-args: |
            APP_VERSION=${{ inputs.semantic_version != '' && inputs.semantic_version || 'unknown' }}
          labels: |
            org.opencontainers.image.version=${{ inputs.semantic_version != '' && inputs.semantic_version || 'unknown' }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}
          tags: |
            ${{ steps.set-tags.outputs.base_image_name }}:${{ steps.set-tags.outputs.image_tag_hash }}
            ${{ steps.set-tags.outputs.base_image_name }}:${{ steps.set-tags.outputs.image_tag_semver != '' && steps.set-tags.outputs.image_tag_semver || steps.set-tags.outputs.image_tag_hash }}
            ${{ steps.set-tags.outputs.image_tag_latest != '' && format('{0}:{1}', steps.set-tags.outputs.base_image_name, steps.set-tags.outputs.image_tag_latest) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.set-tags.outputs.base_image_name }}:${{ steps.set-tags.outputs.image_tag_hash }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.app_component }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.app_component }}.sarif'
          category: 'trivy-${{ matrix.app_component }}'

  collect-outputs:
    needs: build-images
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.collect-outputs.outputs.environment }}
      backend_image_tag_hash: ${{ steps.collect-outputs.outputs.backend_image_tag_hash }}
      backend_image_tag_semver: ${{ steps.collect-outputs.outputs.backend_image_tag_semver }}
      backend_image_tag_latest: ${{ steps.collect-outputs.outputs.backend_image_tag_latest }}
      frontend_image_tag_hash: ${{ steps.collect-outputs.outputs.frontend_image_tag_hash }}
      frontend_image_tag_semver: ${{ steps.collect-outputs.outputs.frontend_image_tag_semver }}
      frontend_image_tag_latest: ${{ steps.collect-outputs.outputs.frontend_image_tag_latest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git commands

      - name: Collect outputs
        id: collect-outputs
        run: |
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          PREFIX="${{ inputs.image_tag_prefix != '' && format('{0}-', inputs.image_tag_prefix) || '' }}"
          ENV_PREFIX="${{ inputs.environment == 'prod' && '' || format('{0}-', inputs.environment) }}"
          SHORT_SHA=$(git rev-parse --short HEAD)

          echo "backend_image_tag_hash=ghcr.io/datascientest-fastapi-project-group-25/${REPO_NAME}-backend:${PREFIX}${ENV_PREFIX}${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "frontend_image_tag_hash=ghcr.io/datascientest-fastapi-project-group-25/${REPO_NAME}-frontend:${PREFIX}${ENV_PREFIX}${SHORT_SHA}" >> $GITHUB_OUTPUT

          if [ -n "${{ inputs.semantic_version }}" ]; then
            echo "backend_image_tag_semver=ghcr.io/datascientest-fastapi-project-group-25/${REPO_NAME}-backend:${PREFIX}${ENV_PREFIX}${{ inputs.semantic_version }}" >> $GITHUB_OUTPUT
            echo "frontend_image_tag_semver=ghcr.io/datascientest-fastapi-project-group-25/${REPO_NAME}-frontend:${PREFIX}${ENV_PREFIX}${{ inputs.semantic_version }}" >> $GITHUB_OUTPUT
          else
            echo "backend_image_tag_semver=" >> $GITHUB_OUTPUT
            echo "frontend_image_tag_semver=" >> $GITHUB_OUTPUT
          fi

          if [ "${{ inputs.environment }}" = "prod" ]; then
            echo "backend_image_tag_latest=ghcr.io/datascientest-fastapi-project-group-25/${REPO_NAME}-backend:${PREFIX}latest" >> $GITHUB_OUTPUT
            echo "frontend_image_tag_latest=ghcr.io/datascientest-fastapi-project-group-25/${REPO_NAME}-frontend:${PREFIX}latest" >> $GITHUB_OUTPUT
          else
            echo "backend_image_tag_latest=" >> $GITHUB_OUTPUT
            echo "frontend_image_tag_latest=" >> $GITHUB_OUTPUT
          fi

  add-comment:
    needs: collect-outputs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository for comment
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git commands

      - name: Add comment with image tags
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = context.sha;
            const shortSha = sha.substring(0, 7);
            const env = '${{ needs.collect-outputs.outputs.environment }}';
            const prefix = '${{ inputs.image_tag_prefix }}' ? '${{ inputs.image_tag_prefix }}-' : '';

            let envName = env === 'stg' ? 'Staging' : 'Production';
            let imageTagsMessage = '';

            const repoOwner = context.repo.owner.toLowerCase(); // Already lowercase
            const repoName = context.repo.repo.toLowerCase(); // Already lowercase

            // Use the outputs from the collect-outputs job for consistency
            const backendHashTag = '${{ needs.collect-outputs.outputs.backend_image_tag_hash }}';
            const backendSemverTag = '${{ needs.collect-outputs.outputs.backend_image_tag_semver }}';
            const frontendHashTag = '${{ needs.collect-outputs.outputs.frontend_image_tag_hash }}';
            const frontendSemverTag = '${{ needs.collect-outputs.outputs.frontend_image_tag_semver }}';
            const backendLatestTag = '${{ needs.collect-outputs.outputs.backend_image_tag_latest }}';
            const frontendLatestTag = '${{ needs.collect-outputs.outputs.frontend_image_tag_latest }}';

            if (env === 'stg') {
              imageTagsMessage = 'Images are available at:\n' +
                '- Backend:\n' +
                `  - \`${backendHashTag}\` (SHA tag)\n` +
                `  - \`${backendSemverTag}\` (SemVer tag)\n` +
                '- Frontend:\n' +
                `  - \`${frontendHashTag}\` (SHA tag)\n` +
                `  - \`${frontendSemverTag}\` (SemVer tag)`;
            } else { // Assuming 'prod'
              imageTagsMessage = 'Images are available at:\n' +
                `- Backend: \`${backendSemverTag}\` (also tagged as \`${backendLatestTag}\`)\n` +
                `- Frontend: \`${frontendSemverTag}\` (also tagged as \`${frontendLatestTag}\`)`;
            }

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `## ${envName} Images Built\n\n${imageTagsMessage}`
            });

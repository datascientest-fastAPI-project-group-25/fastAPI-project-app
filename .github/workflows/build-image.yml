name: Reusable Image Build and Push

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment to build for (stg or prod)"
      version_bump_type:
        required: false
        type: string
        default: "patch"
        description: "Type of version bump (major, minor, patch)"
      image_tag_prefix:
        required: false
        type: string
        default: ""
        description: "Optional prefix for image tags"
    outputs:
      new_version:
        description: "The new version after bumping"
        value: ${{ jobs.bump-version.outputs.new_version }}
permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}
      bump_type: ${{ inputs.version_bump_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install and cache uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Bump version
        id: bump-version
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          BUMP_TYPE="${{ inputs.version_bump_type }}"
          echo "Attempting to bump version with type: $BUMP_TYPE"

          # Check if version.py exists and is executable
          if [ ! -f "version.py" ]; then
            echo "::error::version.py file not found"
            exit 1
          fi

          # Try to bump the version
          if ! python version.py bump $BUMP_TYPE; then
            echo "::error::Failed to bump version"
            exit 1
          fi

          # Get the new version
          NEW_VERSION=$(python version.py get)
          if [ -z "$NEW_VERSION" ]; then
            echo "::error::Failed to get new version"
            exit 1
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version successfully bumped to $NEW_VERSION"

      - name: Commit and push version bump
        id: commit-version
        continue-on-error: true
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status

          echo "Configuring git user"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          echo "Checking for VERSION file"
          if [ ! -f "VERSION" ]; then
            echo "::warning::VERSION file does not exist, creating it"
            echo "${{ steps.bump-version.outputs.new_version }}" > VERSION
            git add VERSION
          elif ! git diff --quiet VERSION; then
            echo "Changes detected in VERSION file, committing"
            git add VERSION
            git commit -m "chore: bump version to ${{ steps.bump-version.outputs.new_version }} [skip ci]"

            echo "Pushing changes"
            if ! git push; then
              echo "Warning: Failed to push version bump commit, but continuing workflow"
            else
              echo "Successfully committed and pushed version bump"
            fi
          else
            echo "No changes to VERSION file, skipping commit"
          fi

  build-and-push:
    needs: bump-version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.workflow_outputs.outputs.version }}
      environment: ${{ steps.workflow_outputs.outputs.environment }}
    strategy:
      matrix:
        app_component: [backend, frontend]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        id: set-tags
        run: |
          ENV="${{ inputs.environment }}"
          VERSION="${{ needs.bump-version.outputs.new_version }}"
          PREFIX="${{ inputs.image_tag_prefix }}"
          SHORT_SHA="$(echo ${{ github.sha }} | cut -c1-7)"
          COMPONENT="${{ matrix.app_component }}"

          if [ -n "$PREFIX" ]; then
            PREFIX="${PREFIX}-"
          fi

          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')

          if [ "$ENV" == "stg" ]; then
            # Staging: use stg-SHA
            IMAGE_TAGS="ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}stg-${SHORT_SHA}"
          else
            # Production: Use version and latest
            IMAGE_TAGS="ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:${PREFIX}${VERSION},ghcr.io/${REPO_OWNER}/${REPO_NAME}-${COMPONENT}:latest"
          fi

          echo "image_tags=$IMAGE_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.app_component }} image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.app_component }}
          file: ./${{ matrix.app_component }}/Dockerfile
          push: true
          tags: ${{ steps.set-tags.outputs.image_tags }}
          cache-from: type=gha,scope=${{ matrix.app_component }}-${{ inputs.environment }}
          cache-to: type=gha,scope=${{ matrix.app_component }}-${{ inputs.environment }},mode=max
          build-args: |
            APP_VERSION=${{ needs.bump-version.outputs.new_version }}
            GIT_HASH=${{ github.sha }}
            BRANCH_TYPE=${{ inputs.environment }}
          # Enable provenance attestation for supply chain security
          provenance: true
          # Add labels for better image management
          labels: |
            org.opencontainers.image.title=${{ matrix.app_component }}
            org.opencontainers.image.version=${{ needs.bump-version.outputs.new_version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.environment=${{ inputs.environment }}

      - name: Verify ${{ matrix.app_component }} image build
        if: steps.build-image.outcome != 'success'
        run: |
          echo "::error::${{ matrix.app_component }} image build failed"
          exit 1

      - name: Extract image tag
        id: extract-image-tag
        run: |
          IMAGE_TAG="${{ steps.set-tags.outputs.image_tags }}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: steps.extract-image-tag.outcome == 'success'
        continue-on-error: true
        with:
          image-ref: ${{ steps.extract-image-tag.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-${{ matrix.app_component }}-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.extract-image-tag.outcome == 'success'
        continue-on-error: true
        with:
          sarif_file: 'trivy-${{ matrix.app_component }}-results.sarif'
          category: '${{ matrix.app_component }}-image'

      - name: Set workflow outputs
        id: workflow_outputs
        run: |
          echo "version=${{ needs.bump-version.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT

      - name: Comment on commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = context.sha;
            const shortSha = sha.substring(0, 7);
            const version = '${{ needs.bump-version.outputs.new_version }}';
            const bumpType = '${{ needs.bump-version.outputs.bump_type }}';
            const env = '${{ inputs.environment }}';
            const prefix = '${{ inputs.image_tag_prefix }}' ? '${{ inputs.image_tag_prefix }}-' : '';

            let bumpMessage = '';
            if (bumpType === 'major') {
              bumpMessage = 'Major version bump';
            } else if (bumpType === 'minor') {
              bumpMessage = 'Minor version bump';
            } else {
              bumpMessage = 'Patch version bump';
            }

            const envName = env === 'stg' ? 'Staging' : 'Production';
            let imageTagsMessage = '';

            const repoOwner = context.repo.owner.toLowerCase();
            const repoName = context.repo.repo.toLowerCase();

            if (env === 'stg') {
              // For staging: both use stg-SHA
              // Using single quotes to avoid JSON escaping issues with backticks
              imageTagsMessage = 'Images are available at:\n- `ghcr.io/${context.repo.owner.toLowerCase()}/${context.repo.repo.toLowerCase()}-backend:${prefix}stg-${shortSha}`\n- `ghcr.io/${context.repo.owner.toLowerCase()}/${context.repo.repo.toLowerCase()}-frontend:${prefix}stg-${shortSha}`';
            } else {
              // For production: both use version
              // Using single quotes to avoid JSON escaping issues with backticks
              imageTagsMessage = 'Images are available at:\n- `ghcr.io/${context.repo.owner.toLowerCase()}/${context.repo.repo.toLowerCase()}-backend:${prefix}${version}`\n- `ghcr.io/${context.repo.owner.toLowerCase()}/${context.repo.repo.toLowerCase()}-frontend:${prefix}${version}`';
            }

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
              body: `## ${envName} Images Built and Pushed\n\n${bumpMessage}: **${version}**\n\n${imageTagsMessage}\n\n### Security Scanning\nVulnerability scanning was performed on both images. Check the GitHub Security tab for detailed results.\n\n### Image Labels\nImages include standard OCI labels for better traceability and management.`
            });

name: Fix Branch Workflow

on:
  push:
    branches:
      - 'fix/*'
  workflow_dispatch:

jobs:
  style-checks:
    name: Style and Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.11"
          enable-cache: true

      - name: Install Python dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install pytest pytest-cov ruff bandit pip-audit
        working-directory: backend

      - name: Run ruff
        run: |
          source .venv/bin/activate
          ruff check .
        working-directory: backend

      - name: Run bandit
        run: |
          source .venv/bin/activate
          bandit -r .
        working-directory: backend

      - name: Run pip-audit
        run: |
          source .venv/bin/activate
          pip-audit
        working-directory: backend

  test-backend:
    needs: style-checks
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.11"
          enable-cache: true

      - name: Install test dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install pytest pytest-cov
        working-directory: backend

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest --cov=app
        working-directory: backend

  test-frontend:
    needs: style-checks
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install
        working-directory: frontend

      - name: Run Biome check
        run: npx biome check --no-errors-on-unmatched --files-ignore-unknown=true ./
        working-directory: frontend

      - name: Run tests
        run: pnpm test
        working-directory: frontend

  security-checks:
    needs: [test-backend, test-frontend]
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run npm audit
        run: npm audit
        working-directory: frontend

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.11"
          enable-cache: true

      - name: Install security tools
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install safety bandit
        working-directory: backend

      - name: Run safety check
        run: |
          source .venv/bin/activate
          safety check
        working-directory: backend

  build-image:
    needs: security-checks
    name: Build Fix Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  create-pr:
    needs: [security-checks, build-image]
    name: Create PR to dev
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check for automerge
        id: check-automerge
        run: |
          if [[ "$GITHUB_REF" == *"-automerge"* ]]; then
            echo "AUTOMERGE=1" >> $GITHUB_ENV
          fi

      - name: Create PR (standard)
        if: env.AUTOMERGE != '1'
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "fix: ${GITHUB_REF_NAME}"
          body: "Automatically created PR from fix branch\n\nImage built: ${{ steps.meta.outputs.tags }}"
          base: dev
          branch: ${{ github.event.pull_request.head.ref }}
          labels: fix
          assignees: ${{ github.actor }}

      - name: Create PR (automerge)
        if: env.AUTOMERGE == '1'
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "fix: ${GITHUB_REF_NAME} [AUTOMERGE]"
          body: "Automatically created PR from fix branch\n\nImage built: ${{ steps.meta.outputs.tags }}"
          base: dev
          branch: ${{ github.event.pull_request.head.ref }}
          labels: fix,automated
          assignees: ${{ github.actor }}

name: Generate API Client

on:
  pull_request:
    types:
    - opened
    - synchronize
  push:
    branches:
      - main
      - dev

jobs:
  generate-client:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref || github.ref_name }}

    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Check uv availability
      id: check-uv
      run: |
        if command -v uv &> /dev/null; then
          echo "uv is already installed"
          echo "uv_available=true" >> $GITHUB_OUTPUT
        else
          echo "uv is not available, will attempt to install"
          echo "uv_available=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Install uv
      if: steps.check-uv.outputs.uv_available != 'true'
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.5.11"
        enable-cache: true
      continue-on-error: true
      id: install-uv

    - name: Verify uv installation
      id: verify-uv
      run: |
        if command -v uv &> /dev/null; then
          echo "uv is now available"
          echo "uv_available=true" >> $GITHUB_OUTPUT
        else
          echo "uv installation failed or not available"
          echo "uv_available=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Install backend dependencies with uv
      if: steps.verify-uv.outputs.uv_available == 'true'
      run: |
        uv venv
        source .venv/bin/activate
        uv sync
      working-directory: backend

    - name: Install backend dependencies with pip (fallback)
      if: steps.verify-uv.outputs.uv_available != 'true'
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt
      working-directory: backend

    - name: Generate client
      run: |
        source .venv/bin/activate
        bash scripts/generate-client.sh
      env:
        ENVIRONMENT: development
        SECRET_KEY: temp-key-for-client-generation
        POSTGRES_PASSWORD: temp-password-for-client-generation
        FIRST_SUPERUSER_PASSWORD: temp-password-for-client-generation
      working-directory: backend

    - name: Check for changes
      id: check-changes
      run: |
        git add frontend/src/client
        if git diff --staged --quiet; then
          echo "No changes detected in the API client"
          echo "changes_detected=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in the API client"
          echo "changes_detected=true" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Commit changes
      if: steps.check-changes.outputs.changes_detected == 'true'
      run: |
        git config --local user.email "github-actions@github.com"
        git config --local user.name "github-actions"
        git commit -m "ðŸ“š Update API client"
      continue-on-error: true

    - name: Push changes
      if: |
        github.event.pull_request.head.repo.full_name == github.repository &&
        steps.check-changes.outputs.changes_detected == 'true'
      run: git push
      continue-on-error: true

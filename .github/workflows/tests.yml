name: Tests

on:
  workflow_call:
    inputs:
      test_type:
        description: 'Type of tests to run (all, backend-unit, backend-integration, backend-e2e, frontend-unit, frontend-integration, frontend-e2e)'
        required: true
        type: string
      cache_dependencies:
        description: 'Whether to cache dependencies'
        required: false
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  test:
    if: inputs.test_type == 'all' || startsWith(inputs.test_type, 'backend-')
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d test_db"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
          --health-start-period 5s
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      PROJECT_NAME: FastAPI
      POSTGRES_SERVER: localhost
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      FIRST_SUPERUSER: admin@example.com
      FIRST_SUPERUSER_PASSWORD: password
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Create virtual environment and install dependencies
        working-directory: backend
        run: |
          echo "Creating virtual environment..."
          uv venv
          echo "Installing dependencies..."
          uv pip install -e ".[dev,test]"
          echo "Dependencies installed."

      - name: Run backend unit tests
        if: inputs.test_type == 'all' || inputs.test_type == 'backend-unit'
        working-directory: backend
        run: |
          echo "Running backend unit tests..."
          source .venv/bin/activate
          pytest tests/unit

      - name: Run backend integration tests
        if: inputs.test_type == 'all' || inputs.test_type == 'backend-integration'
        working-directory: backend
        run: |
          echo "Running backend integration tests..."
          source .venv/bin/activate
          pytest tests/integration

      - name: Run backend e2e tests
        if: inputs.test_type == 'all' || inputs.test_type == 'backend-e2e'
        working-directory: backend
        run: |
          echo "Running backend e2e tests..."
          source .venv/bin/activate
          pytest tests/e2e

  frontend-tests:
    if: inputs.test_type == 'all' || startsWith(inputs.test_type, 'frontend-')
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d test_db"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
          --health-start-period 5s
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run frontend unit tests
        if: inputs.test_type == 'all' || inputs.test_type == 'frontend-unit'
        run: |
          echo "Running frontend unit tests..."
          pnpm run test:unit

      - name: Run frontend integration tests
        if: inputs.test_type == 'all' || inputs.test_type == 'frontend-integration'
        run: |
          echo "Running frontend integration tests..."
          pnpm run test:integration

      - name: Run frontend e2e tests
        if: inputs.test_type == 'all' || inputs.test_type == 'frontend-e2e'
        run: |
          echo "Running frontend e2e tests..."
          pnpm run test:e2e

name: Main Branch Workflow

on:
  pull_request:
    branches:
      - main
    types: [closed]

permissions:
  contents: write
  packages: write

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true }}
    steps:
      - name: Check if PR was merged to main
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "PR was merged to main, proceeding with deployment"
          else
            echo "Not a merged PR to main, skipping deployment"
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Keep Python and Node.js setup steps separate for optimal caching
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      # Separate Node.js setup allows for parallel caching and better error isolation
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install Python linting tools
        run: |
          pip install flake8 black ruff bandit

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run backend linting
        run: |
          cd backend
          flake8 app
          black --check app
          ruff check app
          bandit -r app -x app/tests

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint
          npm run format:check

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Keep Python and Node.js setup steps separate for optimal caching
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Run backend security scan
        run: |
          pip install bandit safety
          cd backend
          bandit -r app -x app/tests
          safety check

      - name: Run frontend security scan
        run: |
          cd frontend
          npm audit

  test:
    needs: [lint]
    runs-on: ubuntu-latest
    # Add job-level environment variables to avoid redundancy
    env:
      PROJECT_NAME: "FastAPI Project"
      POSTGRES_SERVER: "localhost"
      POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'app' }}
      FIRST_SUPERUSER: "admin@example.com"
      FIRST_SUPERUSER_PASSWORD: "adminpass123"
      EMAILS_ENABLED: "True"
      SMTP_HOST: "localhost"
      SMTP_PORT: "25"
      SMTP_USER: "test@example.com"
      SMTP_PASSWORD: "testpassword"
      EMAILS_FROM_EMAIL: "test@example.com"
      SECRET_KEY: "testing_secret_key_for_ci"
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'app' }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres && psql -U postgres -d app -c 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Keep Python and Node.js setup steps separate for optimal caching
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      # Separate Node.js setup allows for parallel caching and better error isolation
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Initialize database schema
        run: |
          cd backend
          python scripts/init_db.py

      - name: Run backend tests
        run: |
          cd backend
          pytest -xvs app/tests/

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.test.yml up \
            --build --exit-code-from backend-tests

  semantic-release:
    needs: [test, security-scan, check-conditions]
    if: needs.check-conditions.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm ci

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  publish-images:
    needs: [semantic-release, check-conditions]
    if: needs.check-conditions.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/datascientest-fastapi-project-group-25/backend:${{ steps.get_version.outputs.version || 'latest' }}
            ghcr.io/datascientest-fastapi-project-group-25/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/datascientest-fastapi-project-group-25/frontend:${{ steps.get_version.outputs.version || 'latest' }}
            ghcr.io/datascientest-fastapi-project-group-25/frontend:latest
          build-args: |
            VITE_API_URL=http://localhost:8000
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify image publication
        run: |
          echo "Published Docker images to GHCR: \
            ghcr.io/datascientest-fastapi-project-group-25/backend:${{ steps.get_version.outputs.version || 'latest' }} \
            ghcr.io/datascientest-fastapi-project-group-25/frontend:${{ steps.get_version.outputs.version || 'latest' }}"
          echo "These images are now available for deployment by the infrastructure repository."

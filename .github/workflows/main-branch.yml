name: Main Branch Workflow

on:
  pull_request:
    branches:
      - main
    types: [closed]

permissions:
  contents: write
  packages: write

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true }}
    steps:
      - name: Check if PR was merged to main
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "PR was merged to main, proceeding with deployment"
          else
            echo "Not a merged PR to main, skipping deployment"
          fi
  
  full-test-suite:
    runs-on: ubuntu-latest
    services:
      # Set up PostgreSQL service for testing
      postgres:
        image: postgres:15
        env:
          # Use secrets with fallbacks for database credentials
          POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'app' }}
        ports:
          - 5432:5432
        # Enhanced health checks to verify database is fully functional
        options: >-
          --health-cmd "pg_isready -U postgres && psql -U postgres -d app -c 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install uv
        run: |
          pip install 'uv==0.4.15'

      - name: Install backend dependencies
        run: |
          cd backend
          if [ -f "requirements.txt" ]; then
            uv pip install --system -r requirements.txt
          else
            uv pip install --system .
          fi

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Initialize database schema
        # This step initializes the database schema before running tests.
# It ensures that all required database tables exist before the tests start, preventing errors.
        env:
          # Application configuration
          PROJECT_NAME: "FastAPI Project"
          
          # Database configuration
          POSTGRES_SERVER: "localhost"
          POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'app' }}
          
          # User configuration
          FIRST_SUPERUSER: "admin@example.com"
          FIRST_SUPERUSER_PASSWORD: "adminpass123"
          
          # Security
          SECRET_KEY: "testing_secret_key_for_ci"
        run: |
          cd backend
          # Check if the script exists before attempting to execute it
          if [ -f scripts/init_db.py ]; then
            # Make the script executable and run it
            chmod +x scripts/init_db.py
            python scripts/init_db.py
          else
            echo "Error: scripts/init_db.py not found"
            exit 1
          fi
          
      - name: Run backend tests
        # These environment variables are only used for CI testing
        env:
          # Application configuration
          PROJECT_NAME: "FastAPI Project"
          
          # Database configuration
          POSTGRES_SERVER: "localhost"
          POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'app' }}
          
          # User configuration
          FIRST_SUPERUSER: "admin@example.com"
          FIRST_SUPERUSER_PASSWORD: "adminpass123"
          
          # Security
          SECRET_KEY: "testing_secret_key_for_ci"
        run: |
          cd backend
          pytest -xvs app/tests/

      - name: Run frontend tests
        run: |
          cd frontend
          npm test || echo "No frontend tests available"

      - name: Run linting
        run: |
          cd backend
          flake8 app
          black --check app

      - name: Run security scans
        run: |
          cd backend
          uv pip install --system bandit
          bandit -r app -x app/tests

          cd ../frontend
          npm audit || echo "Vulnerabilities found, but continuing"

      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.test.yml up \
            --build --exit-code-from backend-tests

  semantic-release:
    needs: [full-test-suite, check-conditions]
    if: needs.check-conditions.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  publish-images:
    needs: [semantic-release, check-conditions]
    if: needs.check-conditions.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      # Backend image build and push
      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/datascientest-fastapi-project-group-25/backend:${{ steps.get_version.outputs.version || 'latest' }}
            ghcr.io/datascientest-fastapi-project-group-25/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Frontend image build and push
      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/datascientest-fastapi-project-group-25/frontend:${{ steps.get_version.outputs.version || 'latest' }}
            ghcr.io/datascientest-fastapi-project-group-25/frontend:latest
          build-args: |
            VITE_API_URL=http://localhost:8000
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify image publication
        run: |
          echo "Published Docker images to GHCR: \
            ghcr.io/datascientest-fastapi-project-group-25/backend:${{ steps.get_version.outputs.version || 'latest' }} \
            ghcr.io/datascientest-fastapi-project-group-25/frontend:${{ steps.get_version.outputs.version || 'latest' }}"
          echo "These images are now available for deployment by the infrastructure repository."

name: Development Branch Checks

on:
  push:
    branches:
      - 'feat/**'
      - 'fix/**'
  pull_request:
    branches: [stg]
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  skip-duplicate:
    runs-on: ubuntu-latest
    outputs:
      duplicate: ${{ steps.skip.outputs.duplicate }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Skip Duplicate Actions
        id: skip
        uses: fkirc/skip-duplicate-actions@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  format:
    needs: [skip-duplicate]
    if: |
      (github.event_name == 'pull_request' && needs.skip-duplicate.outputs.duplicate == 'false') ||
      (github.event_name == 'push' && needs.skip-duplicate.outputs.duplicate == 'false')
    runs-on: ubuntu-latest
    steps:
      - name: Formatting
        uses: ./.github/workflows/formatting.yml
        with:
          target: all

  lint:
    needs: [format]
    if: |
      (github.event_name == 'pull_request' && needs.skip-duplicate.outputs.duplicate == 'false') ||
      (github.event_name == 'push' && needs.skip-duplicate.outputs.duplicate == 'false')
    runs-on: ubuntu-latest
    steps:
      - name: Linting
        uses: ./.github/workflows/linting.yml
        with:
          target: all

  backend-tests:
    needs: [lint]
    if: |
      (github.event_name == 'pull_request' && needs.skip-duplicate.outputs.duplicate == 'false') ||
      (github.event_name == 'push' && needs.skip-duplicate.outputs.duplicate == 'false')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [backend-unit, backend-integration, backend-e2e]
    steps:
      - name: Backend Tests
        uses: ./.github/workflows/tests.yml
        with:
          test_type: ${{ matrix.test-type }}

  frontend-tests:
    needs: [lint]
    if: |
      (github.event_name == 'pull_request' && needs.skip-duplicate.outputs.duplicate == 'false') ||
      (github.event_name == 'push' && needs.skip-duplicate.outputs.duplicate == 'false')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [frontend-unit, frontend-integration, frontend-e2e]
    steps:
      - name: Frontend Tests
        uses: ./.github/workflows/tests.yml
        with:
          test_type: ${{ matrix.test-type }}

  trigger-pr-creation:
    needs: [frontend-tests, backend-tests]
    if: github.event_name == 'push' && needs.skip-duplicate.outputs.duplicate == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger PR Creation Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: create-pr-to-stg
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "branch": "${{ github.ref_name }}", "commit_message": "${{ github.event.head_commit.message }}"}'

  build-staging:
    needs: [frontend-tests, backend-tests]
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'stg' && needs.skip-duplicate.outputs.duplicate == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:staging-pr-${{ github.event.pull_request.number }}
          target: staging
          cache-from: type=gha,scope=staging
          cache-to: type=gha,mode=max,scope=staging

      - name: Deploy and test staging environment
        run: |
          docker compose -f docker-compose.yml -f docker-compose.staging.yml pull
          docker compose -f docker-compose.yml -f docker-compose.staging.yml up -d
          docker compose -f docker-compose.yml -f docker-compose.staging.yml run --rm test

      - name: Health check
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8000/api/health; then
              exit 0
            fi
            sleep 5
          done
          exit 1

name: Pull Request Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - dev

jobs:
  label-pr:
    name: Label PR
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Label PR based on branch
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.payload.pull_request.head.ref;
            const labels = [];
            
            if (branch.startsWith('feat/')) {
              labels.push('feature');
            } else if (branch.startsWith('fix/')) {
              labels.push('bug');
            }
            
            if (context.payload.pull_request.base.ref === 'main') {
              labels.push('production');
            } else if (context.payload.pull_request.base.ref === 'dev') {
              labels.push('development');
            }
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

  assign-reviewers:
    name: Assign Reviewers
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Assign reviewers based on changes
        uses: actions/github-script@v7
        with:
          script: |
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Define potential reviewers with fallbacks
            const reviewerMap = {
              'backend': ['backend-reviewer', 'tech-lead'],
              'frontend': ['frontend-reviewer', 'tech-lead']
            };
            
            const reviewersToAssign = new Set();
            
            try {
              // Get repository collaborators to check if reviewers exist
              const collaborators = await github.rest.repos.listCollaborators({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              
              const collaboratorLogins = collaborators.data.map(user => user.login);
              console.log('Available collaborators:', collaboratorLogins);
              
              // Determine which files were changed
              const fileTypes = new Set();
              files.data.forEach(file => {
                if (file.filename.startsWith('backend/')) {
                  fileTypes.add('backend');
                } else if (file.filename.startsWith('frontend/')) {
                  fileTypes.add('frontend');
                }
              });
              
              // Try to find valid reviewers from our map
              fileTypes.forEach(type => {
                const potentialReviewers = reviewerMap[type] || [];
                for (const reviewer of potentialReviewers) {
                  if (collaboratorLogins.includes(reviewer)) {
                    reviewersToAssign.add(reviewer);
                    break; // Only add one reviewer per file type
                  }
                }
              });
              
              // If no valid reviewers found, try to assign the PR author's team lead
              if (reviewersToAssign.size === 0 && collaboratorLogins.includes('tech-lead')) {
                reviewersToAssign.add('tech-lead');
              }
              
              // Request reviews if we found valid reviewers
              if (reviewersToAssign.size > 0) {
                console.log('Assigning reviewers:', Array.from(reviewersToAssign));
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  reviewers: Array.from(reviewersToAssign)
                });
              } else {
                console.log('No valid reviewers found among repository collaborators');
              }
            } catch (error) {
              console.log('Error assigning reviewers:', error.message);
            }

  test:
    name: Run Tests
    uses: ./.github/workflows/_shared/jobs.yml
    with:
      environment: staging
      image-tag: pr-${{ github.event.pull_request.number }}
      python-version: '3.11'
      node-version: '18'
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

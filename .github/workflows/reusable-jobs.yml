name: Reusable Jobs

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
      node-version:
        required: false
        type: string
        default: '18'
      environment:
        required: true
        type: string
      image-tag:
        required: true
        type: string
    secrets:
      AWS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set up uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.4.15"
        enable-cache: true

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv sync
      working-directory: backend

    - name: Run backend tests
      run: |
        source .venv/bin/activate
        pytest
      working-directory: backend

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend

    - name: Run frontend tests
      run: npm test
      working-directory: frontend

  deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActionsSession
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devops-demo-backend-${{ inputs.environment }}
        IMAGE_TAG: ${{ inputs.image-tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Build and push frontend image  
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devops-demo-frontend-${{ inputs.environment }}
        IMAGE_TAG: ${{ inputs.image-tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./frontend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Trigger ECS deployment
      run: |
        aws ecs update-service --cluster devops-demo-${{ inputs.environment }}-cluster \
          --service devops-demo-backend-${{ inputs.environment }} --force-new-deployment
        aws ecs update-service --cluster devops-demo-${{ inputs.environment }}-cluster \
          --service devops-demo-frontend-${{ inputs.environment }} --force-new-deployment

    - name: Clean up
      if: always()
      run: docker system prune -af

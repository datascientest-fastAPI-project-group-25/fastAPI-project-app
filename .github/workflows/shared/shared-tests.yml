name: Shared Tests

on:
  workflow_call:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        type: string
        default: 'unit'

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d test_db"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
          --health-start-period 5s
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      PROJECT_NAME: FastAPI
      POSTGRES_SERVER: localhost
      POSTGRES_USER: postgres
      FIRST_SUPERUSER: admin@example.com
      FIRST_SUPERUSER_PASSWORD: password
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Cache uv directory
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            backend/.venv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/requirements*.txt', 'backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        working-directory: backend
        run: uv venv --system-site-packages && uv pip install -e ".[dev,lint,types,test]"

      - name: Wait for PostgreSQL
        working-directory: backend
        run: |
          uv run python -c "import time, psycopg; \
          for i in range(30): \
              try: \
                  conn = psycopg.connect('postgresql://postgres:postgres@localhost:5432/test_db'); \
                  conn.close(); \
                  print('PostgreSQL is ready!'); \
                  break; \
              except Exception as e: \
                  if i == 29: raise e; \
                  print(f'Waiting for PostgreSQL: {e}'); \
                  time.sleep(1);"

      - name: Run tests
        working-directory: backend
        run: |
          case "${{ inputs.test_type }}" in
            "unit")
              uv run pytest --cov=app --cov-report=xml
              ;;
            "integration")
              uv run pytest -m integration --cov=app --cov-report=xml
              ;;
            "e2e")
              uv run pytest -m e2e --cov=app --cov-report=xml
              ;;
            "security")
              uv run bandit -r app/ -c bandit.yaml
              ;;
            "performance")
              uv run pytest --benchmark-only
              ;;
            *)
              echo "Unknown test type: ${{ inputs.test_type }}"
              exit 1
              ;;
          esac

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: ${{ inputs.test_type != 'security' && inputs.test_type != 'performance' }}
        with:
          name: coverage-report
          path: backend/coverage.xml
